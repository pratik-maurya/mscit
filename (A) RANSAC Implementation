1. linearleastsquare.py
import numpy as np

class LinearLeastSqaureModel:
    def fit(self, A, Y):
        A_transpose = A.T
        ATA = A_transpose.dot(A)
        ATY = A_transpose.dot(Y)
        model = np.linalg.inv(ATA).dot(ATY)
        return model

  2. ransac.py
import numpy as np
import math

class RansacModel:
    def __init__(self, curve_fitting_model):
        self.curve_fitting_model = curve_fitting_model

    def fit(self, A, Y, num_sample, threshold):
        num_iterations = math.inf
        iterations_done = 0
        max_inlier_count = 0
        best_model = None
        prob_outlier = 0.5
        desired_prob = 0.95

        total_data = np.column_stack((A, Y))  # Combine features and target
        data_size = len(total_data)

        while num_iterations > iterations_done:
            np.random.shuffle(total_data)
            sample_data = total_data[:num_sample, :]

            estimated_model = self.curve_fitting_model.fit(sample_data[:, :-1], sample_data[:, -1:])
            y_cap = A.dot(estimated_model)
            err = np.abs(Y - y_cap.T)
            inlier_count = np.count_nonzero(err < threshold)

            if inlier_count > max_inlier_count:
                max_inlier_count = inlier_count
                best_model = estimated_model

                prob_outlier = 1 - inlier_count / data_size
                print('# inliers:', inlier_count)
                print('# prob_outlier:', prob_outlier)
                num_iterations = math.log(1 - desired_prob) / math.log(1 - (1 - prob_outlier) ** num_sample)

            iterations_done += 1
            print('# s:', iterations_done)
            print('# n:', num_iterations)
            print('# max_inlier_count:', max_inlier_count)

        return best_model

  3. modelfitting.py

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt

from ransac import RansacModel
from linearleastsquare import LinearLeastSqaureModel

def fit_curve(data):
    x_values = np.array(data['x'])
    y_values = np.array(data['y'])
    x_sq = np.power(x_values, 2)
    A = np.stack((x_sq, x_values, np.ones(len(x_values), dtype=int)), axis=1)
   
    threshold = np.std(y_values) / 2
   
    linear_ls_model = LinearLeastSqaureModel()
    linear_ls_model_estimate = linear_ls_model.fit(A, y_values)
    linear_model_y = A.dot(linear_ls_model_estimate)

    ransac_model = RansacModel(linear_ls_model)
    ransac_model_estimate = ransac_model.fit(A, y_values, 3, threshold)
    ransac_model_y = A.dot(ransac_model_estimate)

    return linear_model_y, ransac_model_y

if __name__ == '__main__':
    df1 = pd.read_csv('data_1.csv')
    df2 = pd.read_csv('data_2.csv')

    ls_model_y1, ransac_model_y1 = fit_curve(df1)
    ls_model_y2, ransac_model_y2 = fit_curve(df2)

    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))

    ax1.set_title('Dataset-1')
    ax1.scatter(df1['x'], df1['y'], marker='o', color='green', label='Data points')
    ax1.plot(df1['x'], ls_model_y1, color='red', label='Least square model')
    ax1.plot(df1['x'], ransac_model_y1, color='blue', label='RANSAC model')
    ax1.set(xlabel='x-axis', ylabel='y-axis')
    ax1.legend()

    ax2.set_title('Dataset-2')
    ax2.scatter(df2['x'], df2['y'], marker='o', color='green', label='Data points')
    ax2.plot(df2['x'], ls_model_y2, color='red', label='Least square model')
    ax2.plot(df2['x'], ransac_model_y2, color='blue', label='RANSAC model')
    ax2.set(xlabel='x-axis', ylabel='y-axis')
    ax2.legend()

    plt.show()
