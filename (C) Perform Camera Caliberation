import cv2
import numpy as np
import glob

# Chessboard size (number of internal corners)
chessboard_size = (6, 9)

# Criteria for cornerSubPix refinement
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)

# Prepare 3D points (0,0,0), (1,0,0), ..., (5,8,0)
object_points_3d = np.zeros((chessboard_size[0] * chessboard_size[1], 3), np.float32)
object_points_3d[:, :2] = np.mgrid[0:chessboard_size[0], 0:chessboard_size[1]].T.reshape(-1, 2)

# Arrays to store object points and image points
object_points = []  # 3D points in real world space
image_points = []   # 2D points in image plane

# Load all .jpg images in the current directory
images = glob.glob('*.jpg')

for filename in images:
    image = cv2.imread(filename)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Find the chessboard corners
    ret, corners = cv2.findChessboardCorners(gray, chessboard_size,
                    cv2.CALIB_CB_ADAPTIVE_THRESH +
                    cv2.CALIB_CB_FAST_CHECK +
                    cv2.CALIB_CB_NORMALIZE_IMAGE)

    # If found, refine and add points
    if ret:
        object_points.append(object_points_3d)

        corners_refined = cv2.cornerSubPix(gray, corners, (11, 11), (-1, -1), criteria)
        image_points.append(corners_refined)

        # Draw and display the corners
        cv2.drawChessboardCorners(image, chessboard_size, corners_refined, ret)
        cv2.imshow('Chessboard Detection', image)
        cv2.waitKey(500)

cv2.destroyAllWindows()

# Calibrate the camera
ret, camera_matrix, distortion_coeffs, rotation_vecs, translation_vecs = cv2.calibrateCamera(
    object_points, image_points, gray.shape[::-1], None, None
)

# Display calibration results
print("Camera Matrix:\n", camera_matrix)
print("\nDistortion Coefficients:\n", distortion_coeffs)
print("\nRotation Vectors:\n", rotation_vecs)
print("\nTranslation Vectors:\n", translation_vecs)
